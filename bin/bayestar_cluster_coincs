#!/usr/bin/env python
#
# Copyright (C) 2012  Leo Singer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
from __future__ import division
"""
Pick out the highest SNR coincs for the 10 seconds before and after each injection.
"""
__author__ = "Leo Singer <leo.singer@ligo.org>"


# Command line interface.
from optparse import Option, OptionParser
from bayestar import command

parser = OptionParser(
    formatter = command.NewlinePreservingHelpFormatter(),
    description = __doc__,
    usage="%prog [options] [INPUT.xml[.gz]]",
    option_list = [
        Option("-o", "--output", metavar="OUTPUT.xml[.gz]", default="/dev/stdout",
            help="Name of output file (default=stdout)")
    ]
)
opts, args = parser.parse_args()
infilename = command.get_input_filename(parser, args)


# Python standard library imports.
import os

# LIGO-LW XML imports.
from glue.ligolw import ligolw
from pylal import ligolw_inspinjfind
from glue.ligolw.utils import process as ligolw_process
from glue.ligolw import table as ligolw_table
from pylal import ligolw_thinca
from glue.ligolw import utils as ligolw_utils
from glue.ligolw import lsctables

# glue and LAL imports.
from glue import lal

# Other imports.
import numpy as np


# Read injection file.
xmldoc = ligolw_utils.load_filename(infilename)

# Write process metadata to output file.
process = ligolw_process.register_to_xmldoc(xmldoc, parser.get_prog_name(),
    opts.__dict__, ifos=["H1", "L1", "V1"], comment="Clustered coincidences")

# Extract tables from file.
sim_inspiral_table = ligolw_table.get_table(xmldoc,
    lsctables.SimInspiralTable.tableName)
coinc_table = ligolw_table.get_table(xmldoc,
    lsctables.CoincTable.tableName)
coinc_inspiral_table = ligolw_table.get_table(xmldoc,
    lsctables.CoincInspiralTable.tableName)

coinc_table_2 = []

records = [coinc for coinc in coinc_table]
records = [((coinc_inspiral for coinc_inspiral in coinc_inspiral_table if coinc_inspiral.coinc_event_id==coinc.coinc_event_id).next(), coinc) for coinc in records]
records = [(coinc_inspiral.snr, coinc_inspiral.end_time + 1e-9*coinc_inspiral.end_time_ns, coinc) for coinc_inspiral, coinc in records]

for sim_inspiral in sim_inspiral_table:
    end_time = sim_inspiral.geocent_end_time + 1e-9*sim_inspiral.geocent_end_time_ns
    matching_coincs = [record for record in records if abs(record[1] - end_time) < 10]
    if matching_coincs:
        coinc_table_2.append(max(matching_coincs)[2])

coinc_table[:] = coinc_table_2[:]

# Record process end time.
ligolw_process.set_process_end_time(process)

# Write output file.
ligolw_utils.write_filename(xmldoc, opts.output,
    gz=(os.path.splitext(opts.output)[-1]==".gz"))
