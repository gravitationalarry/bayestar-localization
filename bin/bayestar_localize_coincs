#!/usr/bin/env python
#
# Copyright (C) 2012  Leo Singer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Produce GW sky maps for all injections with associated found coincidences in
a LIGO-LW XML file.

A string naming the kind of prior -- "uniform in log distance" or
"uniform in volume" -- is a required command line argument as well as the
minimum and maximum distance. The filename of the (optionally gzip-compressed)
LIGO-LW XML input is an optional argument; if omitted, input is read from stdin.

If the --min-distance argument is omitted, it defaults to half the minimum
effective distance among all of the detectors. If the --max-distance argument
is omitted, it defaults to twice the maximum effective distance among detectors.

Output consists of two text files, "toa.out" and "toa_snr.out", which contain
statistics about the TOA-only sky maps and the TOA-and-SNR sky maps
respectively. The columns are:

  "elapsed_time": elapsed run time,
  "searched_area": searched area in square degrees,
  "searched_prob": searched probability, and
  "offset": angle from maximum a posteriori sky location to true sky location.

Also, a FITS file is created for each sky map, having a filename of the form

  "sim_inspiral:simulation_id:X.toa.fits.gz" or
  "sim_inspiral:simulation_id:X.toa_snr.fits.gz"

where X is the LIGO-LW row id of the injection and "toa" or "toa_snr" identifies
whether the sky map accounts for TOA only or both TOA and SNR.
"""
__author__ = "Leo Singer <leo.singer@ligo.org>"


# Command line interface.
prior_choices = ("uniform in log distance", "uniform in volume")
from optparse import Option, OptionParser
from bayestar import command

parser = OptionParser(
    formatter = command.NewlinePreservingHelpFormatter(),
    description = __doc__,
    usage = '%prog [options] --prior "uniform in log distance"|"uniform in volume" [INPUT.xml[.gz]]',
    option_list = [
        Option("--nside", "-n", type=int, default=-1,
            help="HEALPix lateral resolution (default=auto)"),
        Option("--f-low", type=float, metavar="Hz",
            help="Low frequency cutoff (default=inherit from sim_inspirals)"),
        Option("--waveform",
            help="Waveform to use for determining parameter estimation accuracy from signal model (default=inherit from sim_inspirals)"),
        Option("--min-distance", type=float, metavar="Mpc",
            help="Minimum distance of prior in megaparsecs"),
        Option("--max-distance", type=float, metavar="Mpc",
            help="Maximum distance prior in megaparsecs"),
        Option("--prior", choices=prior_choices, metavar="|".join(prior_choices),
            help="Distance prior (required)"),
        Option("--reference-frequency", type=float, metavar="Hz",
            help="Shift trigger times from coalescence time to time when GW inspiral has this frequency"),
        Option("--reference-psd-cache", metavar="FILE.cache",
            action='append',
            help="Path to LAL cache pointing to PSDs")
    ]
)
opts, args = parser.parse_args()
infilename = command.get_input_filename(parser, args)
command.check_required_arguments(parser, opts, "prior")


#
# Logging
#

logging.basicConfig(level=logging.INFO)
log = logging.getLogger('BAYESTAR')

# LIGO-LW XML imports.
import glue.lal
from glue.ligolw import utils as ligolw_utils

# BAYESTAR imports.
from bayestar.decorator import memoized
from bayestar import io
from bayestar import ligolw as ligolw_bayestar
from bayestar import filter
from bayestar import timing
import bayestar.ligolw_sky_map

# Other imports.
import healpy as hp
import numpy as np

# Read injection file.
xmldoc = ligolw_utils.load_filename(infilename)

if opts.reference_psd_cache is not None:
    # Read PSD cache.
    reference_psd_cache = glue.lal.Cache.fromfilenames(opts.reference_psd_cache)

    @memoized
    def reference_psds_for_filename(filename):
        xmldoc = ligolw_utils.load_filename(filename)
        psds = bayestar.ligolw_sky_map.read_psd_xmldoc(xmldoc)
        return dict(
            (key, timing.InterpolatedPSD(filter.abscissa(psd), psd.data.data))
            for key, psd in psds.iteritems())

    def reference_psd_for_ifo_and_filename(ifo, filename):
        return reference_psds_for_filename(filename)[ifo]

    def reference_psd_for_ifo_and_time(ifo, gps_time):
        # Look up reference PSD entries in the cache for the specified
        # detector and GPS time.
        matching_cache_entries = [entry for entry in reference_psd_cache
            if entry.description == 'reference_psd'
            and ifo in entry.observatory
            and gps_time in entry.segment]

        # Display a warning unless there is exactly one matching PSD.
        if len(matching_cache_entries) != 1:
            log.warn("Expected one matching cache entry, found %d",
                len(matching_cache_entries))

        # Break any tie by taking the segment whose center is closest to
        # the requested GPS time
        _, entry = min((abs(gps_time - np.mean(entry.segment)), entry)
            for entry in matching_cache_entries)

        # Open file, parse PSD, and return.
        return reference_psd_for_ifo_and_filename(ifo, matching_cache_entries[0].path)

def find_injection(sky_map, true_ra, true_dec):
    """
    Given a sky map and the true right ascension and declination (in radians),
    find the smallest area in deg^2 that would have to be searched to find the
    source, the smallest posterior mass, and the angular offset in degrees from
    the true location to the maximum (mode) of the posterior.
    """

    # Compute the HEALPix lateral resolution parameter for this sky map.
    npix = len(sky_map)
    nside = hp.npix2nside(npix)

    # Convert from ra, dec to conventional spherical polar coordinates.
    true_theta = 0.5 * np.pi - true_dec
    true_phi = true_ra

    # Find the HEALPix pixel index of the mode of the posterior and of the
    # true sky location.
    mode_pix = np.argmax(sky_map)
    true_pix = hp.ang2pix(nside, true_theta, true_phi)

    # Compute the Cartesian unit vector of the mode and true locations.
    mode_vec = np.asarray(hp.pix2vec(nside, mode_pix))
    true_vec = np.asarray(hp.ang2vec(true_theta, true_phi))

    # Sort the pixels in the sky map by descending posterior probability and
    # form the cumulative sum.  Record the total value.
    indices = np.argsort(sky_map)[::-1]
    cum_sky_map = np.cumsum(sky_map[indices])

    # Find the index of the true location in the cumulative distribution.
    idx = (i for i, pix in enumerate(indices) if pix == true_pix).next()

    # Find the smallest area that would have to be searched to find the true
    # location.
    searched_area = (idx + 1) * hp.nside2pixarea(nside, degrees=True)

    # Find the smallest posterior mass that would have to be searched to find
    # the true location.
    searched_prob = cum_sky_map[idx]

    # Permute the cumulative distribution so that it is indexed the same way
    # as the original sky map.
    cum_sky_map[indices] = cum_sky_map

    # Find the angular offset between the mode and true locations.
    offset = np.rad2deg(np.arccos(np.dot(true_vec, mode_vec)))

    # Done.
    return searched_area, searched_prob, offset


outfile1 = open("toa.out", "w")
outfile2 = open("toa_snr.out", "w")

header = "elapsed_time searched_area searched_prob offset"
print >>outfile1, header
print >>outfile2, header

# Loop over all coinc_event <-> sim_inspiral coincs.
for sim_inspiral, sngl_inspirals in ligolw_bayestar.sim_and_sngl_inspirals_for_xmldoc(xmldoc):

    ra = sim_inspiral.longitude
    dec = sim_inspiral.latitude

    f_low = sim_inspiral.f_lower
    if opts.f_low is not None:
        if f_low is not None:
            log.warn("replacing low frequency cutoff in sim_inspiral table with value provided in '--f-low' command line argument")
        f_low = opts.f_low

    waveform = sim_inspiral.waveform
    if opts.waveform is not None:
        if waveform is not None:
            log.warn("replacing waveform in sim_inspiral table with value provided in '--waveform' command line argument")
        waveform = opts.waveform
    approximant, amplitude_order, phase_order = timing.get_approximant_and_orders_from_string(waveform)

    # Look up PSDs
    if opts.reference_psd_cache is None:
        psds = None
    else:
        psds = [reference_psd_for_ifo_and_time(sngl_inspiral.ifo,
            sngl_inspiral.get_end()) for sngl_inspiral in sngl_inspirals]

    #
    # TOA-only sky localization
    #

    # Time and run sky localization.
    sky_map, epoch, elapsed_time = bayestar.ligolw_sky_map.ligolw_sky_map(
        sngl_inspirals, approximant, amplitude_order, phase_order, f_low,
        psds=psds, reference_frequency=opts.reference_frequency,
        method="toa", nside=opts.nside)

    # Calculate how well the injection is recovered.
    searched_area, searched_prob, offset = find_injection(sky_map, ra, dec)

    # Print results to output file.
    print >>outfile1, elapsed_time, searched_area, searched_prob, offset

    io.write_skymap('%s.toa.fits.gz' % sim_inspiral.simulation_id,
        skymap=sky_map, gps=float(epoch))


    #
    # TOA+SNR sky localization
    #

    # Time and run sky localization.
    sky_map, epoch, elapsed_time = bayestar.ligolw_sky_map.ligolw_sky_map(
        sngl_inspirals, approximant, amplitude_order, phase_order, f_low,
        opts.min_distance, opts.max_distance, opts.prior, psds=psds,
        reference_frequency=opts.reference_frequency, method="toa_snr",
        nside=opts.nside)

    # Calculate how well the injection is recovered.
    searched_area, searched_prob, offset = find_injection(sky_map, ra, dec)

    # Print results to output file.
    print >>outfile2, elapsed_time, searched_area, searched_prob, offset

    io.write_skymap('%s.toa_snr.fits.gz' % sim_inspiral.simulation_id,
        skymap=sky_map, gps=float(epoch))


# Close output files
outfile1.close()
outfile2.close()
