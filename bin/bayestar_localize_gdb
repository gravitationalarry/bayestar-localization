#!/usr/bin/env python
#
# Copyright (C) 2012  Leo Singer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Generate a sky map for a GraCEDb event by extracting times of arrival and SNRs
for the coinc_inspiral record that is present in a LIGO LW-XML file.

A string naming the kind of prior -- "uniform in log distance" or
"uniform in volume" -- is a required command line argument as well as the
minimum and maximum distance. The filename of the (optionally gzip-compressed)
LIGO-LW XML input is an optional argument; if omitted, input is read from stdin.

Output is an optionally gzip-compressed HEALPix FITS file, whose filename is
provided by the required "-o" or "--output" argument.
"""
from __future__ import division
__author__ = "Leo Singer <leo.singer@ligo.org>"


# Command line interface.
prior_choices = ("uniform in log distance", "uniform in volume")
from optparse import Option, OptionParser
from bayestar import command

parser = OptionParser(
    formatter = command.NewlinePreservingHelpFormatter(),
    description = __doc__,
    usage = '%prog [options] --min-distance Mpc --max-distance Mpc --prior "uniform in log distance"|"uniform in volume" [INPUT.xml[.gz]] -o OUTPUT.fits[.gz]',
    option_list = [
        Option("--nside", "-n", type=int, default=-1,
            help="HEALPix lateral resolution (default=auto)"),
        Option("--f-low", type=float, default=10, metavar="Hz",
            help="Low frequency cutoff (default=10)"),
        Option("--order", type=int, default=7,
            help="Twice PN amplitude order, used for computing noise moments (default=7)"),
        Option("--min-distance", type=float, metavar="Mpc",
            help="Minimum distance of prior in megaparsecs (required)"),
        Option("--max-distance", type=float, metavar="Mpc",
            help="Maximum distance prior in megaparsecs (required)"),
        Option("--prior", choices=prior_choices, metavar="|".join(prior_choices),
            help="Distance prior (required)"),
        Option("--reference-frequency", type=float, metavar="Hz",
            help="Shift trigger times from coalescence time to time when GW inspiral has this frequency"),
        Option("--output", "-o", metavar="OUTPUT.fits[.gz]",
            help="Name of output file (required)")
    ]
)
opts, args = parser.parse_args()

if len(args) == 0:
    infilename = "/dev/stdin"
elif len(args) == 1:
    infilename = args[0]
else:
    parser.error("Too many command line arguments")

if opts.prior is None:
    parser.error("Missing required argument --prior")


# Python standard library imports.
import os

# LIGO-LW XML imports.
from glue.ligolw import table as ligolw_table
from glue.ligolw import utils as ligolw_utils
from glue.ligolw import lsctables

# BAYESTAR imports.
from bayestar import io
from bayestar.ligolw_sky_map import ligolw_sky_map

# Read input file.
xmldoc = ligolw_utils.load_filename(infilename)

# Locate the tables that we need.
coinc_inspiral_table = ligolw_table.get_table(xmldoc,
    lsctables.CoincInspiralTable.tableName)
coinc_map_table = ligolw_table.get_table(xmldoc,
    lsctables.CoincMapTable.tableName)
sngl_inspiral_table = ligolw_table.get_table(xmldoc,
    lsctables.SnglInspiralTable.tableName)

# Locate the sngl_inspiral rows that we need.
coinc_inspiral = coinc_inspiral_table[0]
coinc_event_id = coinc_inspiral.coinc_event_id
event_ids = [coinc_map.event_id for coinc_map in coinc_map_table
    if coinc_map.coinc_event_id == coinc_event_id]
sngl_inspirals = [(sngl_inspiral for sngl_inspiral in sngl_inspiral_table
    if sngl_inspiral.event_id == event_id).next() for event_id in event_ids]

# TOA+SNR sky localization
sky_map, epoch, elapsed_time = ligolw_sky_map(sngl_inspirals, opts.order, opts.f_low,
    opts.min_distance, opts.max_distance, opts.prior,
    reference_frequency=opts.reference_frequency, nside=opts.nside)

# Write sky map
io.write_skymap(opts.output, skymap=sky_map, gps=float(epoch))
