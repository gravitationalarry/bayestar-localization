#!/usr/bin/env python
#
# Copyright (C) 2012  Leo Singer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Produce GW sky maps for all injections with associated found coincidences in
a LIGO-LW XML file.

A string naming the kind of prior -- "uniform in log distance" or
"uniform in volume" -- is a required command line argument as well as the
minimum and maximum distance. The filename of the (optionally gzip-compressed)
LIGO-LW XML input is an optional argument; if omitted, input is read from stdin.

Output consists of two text files, "toa.out" and "toa_snr.out", which contain
statistics about the TOA-only sky maps and the TOA-and-SNR sky maps
respectively. The columns are:

  "elapsed_time": elapsed run time,
  "searched_area": searched area in square degrees,
  "searched_prob": searched probability, and
  "offset": angle from maximum a posteriori sky location to true sky location.

Also, a FITS file is created for each sky map, having a filename of the form

  "sim_inspiral:simulation_id:X.toa.fits.gz" or
  "sim_inspiral:simulation_id:X.toa_snr.fits.gz"

where X is the LIGO-LW row id of the injection and "toa" or "toa_snr" identifies
whether the sky map accounts for TOA only or both TOA and SNR.
"""
__author__ = "Leo Singer <leo.singer@ligo.org>"


# Command line interface.
prior_choices = ("uniform in log distance", "uniform in volume")
from optparse import Option, OptionParser
from bayestar_localization import command

opts, args = OptionParser(
    formatter = command.NewlinePreservingHelpFormatter(),
    description = __doc__,
    usage = '%prog [options] --min-distance Mpc --max-distance Mpc --prior "uniform in log distance"|"uniform in volume" [INPUT.xml[.gz]]',
    option_list = [
        Option("--nside", "-n", type=int, default=128,
            help="HEALPix lateral resolution (default=128)"),
        Option("--f-low", type=float, default=10, metavar="Hz",
            help="Low frequency cutoff (default=10)"),
        Option("--order", type=int, default=-1,
            help="Twice PN amplitude order, used for computing noise moments (default=-1, highest available)"),
        Option("--fd", action="store_true", default=False,
            help="Use frequency-domain waveforms for templates (default=false)"),
        Option("--min-distance", type=float, metavar="Mpc",
            help="Minimum distance of prior in megaparsecs (required)"),
        Option("--max-distance", type=float, metavar="Mpc",
            help="Maximum distance prior in megaparsecs (required)"),
        Option("--prior", choices=prior_choices, metavar="|".join(prior_choices),
            help="Distance prior (required)"),
        Option("--reference-frequency", type=float, metavar="Hz",
            help="Shift trigger times from coalescence time to time when GW inspiral has this frequency")
    ]
).parse_args()

if len(args) > 0:
    infilename = args[0]
else:
    infilename = '/dev/stdin'

if opts.min_distance is None:
    raise ValueError("Missing required argument --min-distance")
if opts.max_distance is None:
    raise ValueError("Missing required argument --max-distance")
if opts.prior is None:
    raise ValueError("Missing required argument --prior")


# Python standard library imports.
import os

# LIGO-LW XML imports.
from pylal import llwapp as ligolw_app
from pylal import ligolw_inspinjfind
from glue.ligolw import table as ligolw_table
from pylal import ligolw_thinca
from glue.ligolw import utils as ligolw_utils
from glue.ligolw import lsctables

# BAYESTAR imports.
from bayestar import io
from bayestar_localization.ligolw_sky_map import ligolw_sky_map

# Other imports.
import healpy as hp
import numpy as np

# Read injection file.
xmldoc = ligolw_utils.load_filename(infilename)

def find_injection(sky_map, true_ra, true_dec):
    """
    Given a sky map and the true right ascension and declination (in radians),
    find the smallest area in deg^2 that would have to be searched to find the
    source, the smallest posterior mass, and the angular offset in degrees from
    the true location to the maximum (mode) of the posterior.
    """

    # Compute the HEALPix lateral resolution parameter for this sky map.
    npix = len(sky_map)
    nside = hp.npix2nside(npix)

    # Convert from ra, dec to conventional spherical polar coordinates.
    true_theta = 0.5 * np.pi - true_dec
    true_phi = true_ra

    # Find the HEALPix pixel index of the mode of the posterior and of the
    # true sky location.
    mode_pix = np.argmax(sky_map)
    true_pix = hp.ang2pix(nside, true_theta, true_phi)

    # Compute the Cartesian unit vector of the mode and true locations.
    mode_vec = np.asarray(hp.pix2vec(nside, mode_pix))
    true_vec = np.asarray(hp.ang2vec(true_theta, true_phi))

    # Sort the pixels in the sky map by descending posterior probability and
    # form the cumulative sum.  Record the total value.
    indices = np.argsort(sky_map)[::-1]
    cum_sky_map = np.cumsum(sky_map[indices])

    # Find the index of the true location in the cumulative distribution.
    idx = (i for i, pix in enumerate(indices) if pix == true_pix).next()

    # Find the smallest area that would have to be searched to find the true
    # location.
    searched_area = (idx + 1) * hp.nside2pixarea(nside, degrees=True)

    # Find the smallest posterior mass that would have to be searched to find
    # the true location.
    searched_prob = cum_sky_map[idx]

    # Permute the cumulative distribution so that it is indexed the same way
    # as the original sky map.
    cum_sky_map[indices] = cum_sky_map

    # Find the angular offset between the mode and true locations.
    offset = np.rad2deg(np.arccos(np.dot(true_vec, mode_vec)))

    # Done.
    return searched_area, searched_prob, offset


outfile1 = open("toa.out", "w")
outfile2 = open("toa_snr.out", "w")

header = "elapsed_time searched_area searched_prob offset"
print >>outfile1, header
print >>outfile2, header

# Look up coinc_def ids.
coinc_def = ligolw_thinca.InspiralCoincDef
coinc_def_id = ligolw_app.get_coinc_def_id(xmldoc, coinc_def.search, coinc_def.search_coinc_type, create_new=False)
coinc_def = ligolw_inspinjfind.InspiralSCExactCoincDef
sim_coinc_def_id = ligolw_app.get_coinc_def_id(xmldoc, coinc_def.search, coinc_def.search_coinc_type, create_new=False)

# Look up coinc_table and coinc_map_table.
coinc_table = ligolw_table.get_table(xmldoc, lsctables.CoincTable.tableName)
coinc_map_table = ligolw_table.get_table(xmldoc, lsctables.CoincMapTable.tableName)


def events_for_coinc_event_id(coinc_event_id):
    for coinc_map in coinc_map_table:
        if coinc_map.coinc_event_id == coinc_event_id:
            for row in ligolw_table.get_table(xmldoc, coinc_map.table_name):
                column_name = coinc_map.event_id.column_name
                if getattr(row, column_name) == coinc_map.event_id:
                    yield coinc_map.event_id, row

# Loop over all coinc_event <-> sim_inspiral coincs.
for sim_coinc in coinc_table:

    # If this is not a coinc_event <-> sim_inspiral coinc, skip it.
    if sim_coinc.coinc_def_id != sim_coinc_def_id:
        continue

    # Locate the sim_inspiral and coinc events.
    sim_inspiral = None
    coinc = None
    for event_id, event in events_for_coinc_event_id(sim_coinc.coinc_event_id):
        if event_id.table_name == ligolw_table.StripTableName(lsctables.SimInspiralTable.tableName):
            if sim_inspiral is not None:
                raise RuntimeError("Found more than one matching sim_inspiral entry")
            sim_inspiral = event
        elif event_id.table_name == ligolw_table.StripTableName(lsctables.CoincTable.tableName):
            if coinc is not None:
                raise RuntimeError("Found more than one matching coinc entry")
            coinc = event
        else:
            raise RuntimeError("Did not expect coincidence to contain an event of type '%s'" % event_id.table_name)

    sngl_inspirals = list(event
        for event_id, event in events_for_coinc_event_id(coinc.coinc_event_id))

    ra = sim_inspiral.longitude
    dec = sim_inspiral.latitude

    #
    # TOA-only sky localization
    #

    # Time and run sky localization.
    sky_map, epoch, elapsed_time = ligolw_sky_map(opts.nside, sngl_inspirals,
        opts.order, opts.f_low, reference_frequency=opts.reference_frequency, method="toa", fd=opts.fd)

    # Calculate how well the injection is recovered.
    searched_area, searched_prob, offset = find_injection(sky_map, ra, dec)

    # Print results to output file.
    print >>outfile1, elapsed_time, searched_area, searched_prob, offset

    io.write_skymap('%s.toa.fits.gz' % sim_inspiral.simulation_id,
        skymap=sky_map, gps=float(epoch))


    #
    # TOA+SNR sky localization
    #

    # Time and run sky localization.
    sky_map, epoch, elapsed_time = ligolw_sky_map(opts.nside, sngl_inspirals,
        opts.order, opts.f_low, opts.min_distance, opts.max_distance, opts.prior,
        reference_frequency=opts.reference_frequency, method="toa_snr", fd=opts.fd)

    # Calculate how well the injection is recovered.
    searched_area, searched_prob, offset = find_injection(sky_map, ra, dec)

    # Print results to output file.
    print >>outfile2, elapsed_time, searched_area, searched_prob, offset

    io.write_skymap('%s.toa_snr.fits.gz' % sim_inspiral.simulation_id,
        skymap=sky_map, gps=float(epoch))


# Close output files
outfile1.close()
outfile2.close()
