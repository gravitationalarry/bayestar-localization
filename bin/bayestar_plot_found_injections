#!/usr/bin/env python
#
# Copyright (C) 2013  Leo Singer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
from __future__ import division
"""
Create summary plots for sky maps of found injections, binned cumulatively by
false alarm rate.
"""
__author__ = "Leo Singer <leo.singer@ligo.org>"

# Command line interface.
from optparse import Option, OptionParser
from bayestar import command

opts, args = OptionParser(
    formatter=command.NewlinePreservingHelpFormatter(),
    description=__doc__,
    option_list=[
        Option("--cumulative", action="store_true")
    ]
).parse_args()

# Imports.
import matplotlib
matplotlib.use('agg')
from matplotlib import pyplot as plt
import os
import subprocess
import numpy as np
from pylal.progress import ProgressBar

pb = ProgressBar()

pb.update(-1, 'reading data')

#toa_data_ = np.recfromtxt('toa.out', names=True)
datasets_ = [np.recfromtxt(arg, names=True, delimiter=',', usemask=True) for arg in args]
dataset_names = [os.path.splitext(arg)[0] for arg in args]

log10_min_far = int(np.ceil(np.log10(min(min(dataset['far']) for dataset in datasets_))))
log10_max_far = int(np.ceil(np.log10(max(max(dataset['far']) for dataset in datasets_))))

pb.max = (log10_max_far - log10_min_far + 1) * 5

for i, log10_far in enumerate(range(log10_min_far, log10_max_far + 1)):
    pb.update(text='FAR <= 1e{0} Hz'.format(log10_far))

    far = 10 ** log10_far

    datasets = [dataset[dataset['far'] <= far] for dataset in datasets_]
    labels = dataset_names
    title = r'$\mathrm{{FAR}} \leq 10^{{{0}}}$ Hz'.format(log10_far)
    if len(args) == 1:
        title += ' ({0} events)'.format(len(datasets[0]))
    subdir = 'far_1e{0}'.format(log10_far)
    subprocess.check_call(['mkdir', '-p', subdir])
    os.chdir(subdir)

    combined_datasets = np.hstack(datasets)
    min_searched_area = combined_datasets['searched_area'].min()
    max_searched_area = combined_datasets['searched_area'].max()
    min_offset = combined_datasets['offset'].min()
    max_offset = combined_datasets['offset'].max()
    min_runtime = combined_datasets['runtime'].min()
    max_runtime = combined_datasets['runtime'].max()

    plt.figure(1, figsize=(4, 4))
    plt.subplot(111, aspect=1)
    plt.subplots_adjust(bottom=0.15)
    plt.xlabel('searched posterior mass')
    plt.ylabel('cumulative fraction of injections')
    plt.title(title)

    plt.figure(2, figsize=(4, 3))
    plt.subplots_adjust(bottom=0.15)
    plt.xlim(0, 1)
    plt.xlabel('searched posterior mass')
    plt.ylabel('number of injections')
    plt.title(title)

    plt.figure(3, figsize=(4, 3))
    plt.xscale('log')
    plt.subplots_adjust(bottom=0.15)
    plt.xlabel('searched area (deg$^2$)')
    plt.ylabel('number of injections')
    plt.title(title)

    plt.figure(4, figsize=(4, 3))
    plt.xscale('log')
    plt.subplots_adjust(bottom=0.15)
    plt.xlabel('angle between true location and mode of posterior')
    plt.ylabel('number of injections')
    plt.title(title)

    plt.figure(5, figsize=(4, 3))
    plt.xscale('log')
    plt.subplots_adjust(bottom=0.15)
    plt.xlabel('run time')
    plt.ylabel('number of injections')

    for (data, label) in zip(datasets, labels):
        plt.figure(1)
        plt.plot(np.sort(data['searched_prob']), np.linspace(0, 1, len(data['searched_prob'])), label=label)
        plt.figure(2)
        plt.hist(data['searched_prob'], histtype='step', label=label, bins=np.linspace(0, 1, 20), cumulative=opts.cumulative)
        plt.figure(3)
        plt.hist(data['searched_area'], histtype='step', label=label, bins=np.logspace(np.log10(min_searched_area), np.log10(max_searched_area), 20), cumulative=opts.cumulative)
        plt.figure(4)
        plt.hist(data['offset'], histtype='step', label=label, bins=np.logspace(np.log10(min_offset), np.log10(max_offset), 20), cumulative=opts.cumulative)
        plt.figure(5)
        plt.hist(data['runtime'], histtype='step', bins=np.logspace(np.log10(min_runtime), np.log10(max_runtime), 20), cumulative=opts.cumulative)

    pb.update(i * 5)
    plt.figure(1)
    plt.plot([0, 1], [0, 1], '--', color='0.75')
    plt.grid()
    if len(args) > 1:
        plt.legend(loc='lower right')
    plt.xlim(0, 1)
    plt.ylim(0, 1)
    plt.savefig('searched_prob.pdf')
    plt.close()

    pb.update(i * 5 + 1)
    plt.figure(2)
    plt.grid()
    if len(args) > 1:
        plt.legend(loc='upper left')
    plt.savefig('searched_prob_hist.pdf')
    plt.close()

    pb.update(i * 5 + 2)
    plt.figure(3)
    plt.grid()
    plt.savefig('searched_area_hist.pdf')
    plt.close()

    pb.update(i * 5 + 3)
    plt.figure(4)
    plt.grid()
    plt.savefig('offset_hist.pdf')
    plt.close()

    pb.update(i * 5 + 4)
    plt.grid()
    plt.savefig('runtime_hist.pdf')
    plt.close()

    os.chdir(os.pardir)
